#!/usr/bin/perl
#
# (C) 2013, Clemens Schwaighofer
# currently only works with PostgreSQL DB and only with ONE catalog database

use strict;
use warnings;
use DBD::Pg;

# get the config data from the bacula dbcheck command
my $dir_conf='/usr/sbin/dbcheck -B -c /etc/bacula/bacula-dir.conf';
open(FP, "$dir_conf|") or die "Can't get catalog information $@";
my %cfg;
while (my $l = <FP>)
{
	if ($l =~ /(\w+)=(.+)/)
	{
		$cfg{$1} = $2;
	}
}
close(FP);
# set the db connect data, a) from enviroment (munin conf), local conf (bacula) or default
my $DBUSER = $ENV{DBUSER} || $cfg{'db_user'} || 'bacula';
my $DBPORT = $ENV{DBPORT} || $cfg{'db_port'} || '5432';
my $DBHOST = $ENV{DBHOST} || $cfg{'db_address'} || 'localhost';
my $DBNAME = $ENV{DBNAME} || $cfg{'db_name'} || 'bacula';
my $DBPASS = $ENV{DBPASS} || $cfg{'db_password'};
# the backup job, will be excluded in the bytes count
my $CATALOG = $ENV{CATALOG} || 'CatalogBackup';

if (defined($ARGV[0]) and ($ARGV[0] eq 'config'))
{
	print "graph_title Bytes consumed by backup levels per day\n";
	print "graph_args --base 1024 --lower-limit 0\n";
	print "graph_vlabel Bytes\n";
	print "graph_category bacula\n";
	print "graph_info Bytes by backup level\n";
    print "graph_order incremental differential full\n";

	print "incremental.label Incremental\n";
	print "incremental.draw AREA\n";
	print "incremental.info Bytes used by incremental\n";

	print "differential.label Differntial\n";
	print "differential.draw STACK\n";
	print "differential.info Bytes used by differential backups\n";

	print "full.label Full\n";
	print "full.draw STACK\n";
	print "full.info Bytes used by full backups\n";

	exit(0);
}

# basic data and query vars
my $query;
my $cursor;
my $data;
# connect to DB
my $dsn = "DBI:Pg:dbname=".$DBNAME.";host=".$DBHOST.";port=".$DBPORT;
my $dbh = DBI->connect($dsn, $DBUSER, $DBPASS) || die ("Can't connect to db $DBNAME @ $DBHOST with user $DBUSER\n");

## Endtime is offsetted by one hour because all the backups start at about 2300

# Different logic here: We want to know the amount of jobbytes of the jobs between the current $CATALOG and the last $CATALOG assuming that $CATALOG always gets scheduled as last job.
# Incremental
$query = "SELECT COALESCE(SUM(jobbytes), 0) AS ibytes FROM job WHERE level = 'I' AND type = 'B' AND jobid > (SELECT MAX(jobid) FROM job WHERE name = ? AND jobid != (SELECT MAX(jobid) FROM job WHERE name = ?))";
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute($CATALOG, $CATALOG) || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $IBYTES = $data->{'ibytes'};
# Differential
$query = "SELECT COALESCE(SUM(jobbytes), 0) AS dbytes FROM job WHERE level = 'D' AND type = 'B' AND jobid > (SELECT MAX(jobid) FROM job WHERE name = ? AND jobid != (SELECT MAX(jobid) FROM job WHERE name = ?))";
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute($CATALOG, $CATALOG) || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $DBYTES = $data->{'dbytes'};
# Full
$query = "SELECT COALESCE(SUM(jobbytes), 0) AS fbytes FROM job WHERE level = 'F' AND type = 'B' AND jobid > (SELECT MAX(jobid) FROM job WHERE name = ? AND jobid != (SELECT MAX(jobid) FROM job WHERE name = ?))";
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute($CATALOG, $CATALOG) || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $FBYTES = $data->{'fbytes'};

print "incremental.value $IBYTES\n";
print "differential.value $DBYTES\n";
print "full.value $FBYTES\n";

$cursor->finish;
$dbh->disconnect();

exit(0);
