#!/usr/bin/perl
#
# (C) 2013, Clemens Schwaighofer
# currently only works with PostgreSQL DB and only with ONE catalog database

use strict;
use warnings;
use DBD::Pg;

# get the config data from the bacula dbcheck command
my $dir_conf='/usr/sbin/dbcheck -B -c /etc/bacula/bacula-dir.conf';
open(FP, "$dir_conf|") or die "Can't get catalog information $@";
my %cfg;
while (my $l = <FP>)
{
	if ($l =~ /(\w+)=(.+)/)
	{
		$cfg{$1} = $2;
	}
}
close(FP);
# set the db connect data, a) from enviroment (munin conf), local conf (bacula) or default
my $DBUSER = $ENV{DBUSER} || $cfg{'db_user'} || 'bacula';
my $DBPORT = $ENV{DBPORT} || $cfg{'db_port'} || '5432';
my $DBHOST = $ENV{DBHOST} || $cfg{'db_address'} || 'localhost';
my $DBNAME = $ENV{DBNAME} || $cfg{'db_name'} || 'bacula';
my $DBPASS = $ENV{DBPASS} || $cfg{'db_password'};

if (defined($ARGV[0]) and ($ARGV[0] eq 'config'))
{
	print "graph_title Bytes consumed by backup levels\n";
	print "graph_args --base 1024 --lower-limit 0\n";
	print "graph_vlabel Bytes\n";
	print "graph_category bacula\n";
	print "graph_info Bytes by backup level\n";
    print "graph_order incremental differential full avail free\n";

	print "incremental.label Incremental\n";
	print "incremental.draw AREA\n";
	print "incremental.info Bytes used by incremental\n";

	print "differential.label Differntial\n";
	print "differential.draw STACK\n";
	print "differential.info Bytes used by differential backups\n";

	print "full.label Full\n";
	print "full.draw STACK\n";
	print "full.info Bytes used by full backups\n";

	print "free.label Free\n";
	print "free.draw STACK\n";
	print "free.info Free bytes\n";

	print "avail.label Total pool size\n";
	print "avail.draw LINE1\n";
	print "avail.info Available bytes in backup pool\n";

	exit(0);
}

# basic data and query vars
my $query;
my $cursor;
my $data;
# connect to DB
my $dsn = "DBI:Pg:dbname=".$DBNAME.";host=".$DBHOST.";port=".$DBPORT;
my $dbh = DBI->connect($dsn, $DBUSER, $DBPASS) || die ("Can't connect to db $DBNAME @ $DBHOST with user $DBUSER\n");

# available bytes
$query = 'SELECT (SUM(numvols) * SUM(maxvolbytes)) AS avail FROM pool p, job j WHERE p.poolid = j.poolid';
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute() || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $AVAIL = $data->{'avail'};
# bytes used by incremental backups
$query = "SELECT COALESCE(SUM(jobbytes), 0) AS ibytes FROM job WHERE level='I' AND type='B'";
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute() || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $IBYTES = $data->{'ibytes'};
# bytes used by differential backups
$query = "SELECT COALESCE(SUM(jobbytes), 0) AS dbytes FROM job WHERE level='D' AND type='B'";
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute() || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $DBYTES = $data->{'dbytes'};
# bytes used by differential backups
$query = "SELECT COALESCE(SUM(jobbytes), 0) AS fbytes FROM job WHERE level='F' AND type='B'";
$cursor = $dbh->prepare(qq{$query}) || die ("Cannot prepare ".$DBI::errstr."\n");
$cursor->execute() || die ("Cannot execute ".$cursor->errstr."\n");
$data = $cursor->fetchrow_hashref;
my $FBYTES = $data->{'fbytes'};

if ($AVAIL == 0)
{
	$AVAIL = $IBYTES + $DBYTES + $FBYTES;
}
# Free bytes
my $FREE = $AVAIL - $IBYTES - $DBYTES - $FBYTES;

print "avail.value $AVAIL\n";
print "incremental.value $IBYTES\n";
print "differential.value $DBYTES\n";
print "full.value $FBYTES\n";
print "free.value $FREE\n";

$cursor->finish;
$dbh->disconnect();

exit(0);
